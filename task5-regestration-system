import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    String code;
    String title;
    String description;
    int capacity;
    String schedule;

    public Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }

    public String toString() {
        return "Course Code: " + code + "\nTitle: " + title + "\nDescription: " + description + "\nCapacity: " + capacity + "\nSchedule: " + schedule;
    }
}

class Student {
    int studentID;
    String name;
    List<String> registeredCourses;

    public Student(int studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }
}

public class CourseRegistrationSystem {
    public static void main(String[] args) {
        List<Course> courseDatabase = new ArrayList<>();
        List<Student> studentDatabase = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nCourse Registration System");
            System.out.println("1. Add Course");
            System.out.println("2. List Courses");
            System.out.println("3. Register Student");
            System.out.println("4. Remove Student from Course");
            System.out.println("5. Exit");
            System.out.print("Select an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter Course Code: ");
                    String code = scanner.nextLine();
                    System.out.print("Enter Course Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Course Description: ");
                    String description = scanner.nextLine();
                    System.out.print("Enter Course Capacity: ");
                    int capacity = scanner.nextInt();
                    scanner.nextLine();  // Consume the newline character
                    System.out.print("Enter Course Schedule: ");
                    String schedule = scanner.nextLine();

                    Course course = new Course(code, title, description, capacity, schedule);
                    courseDatabase.add(course);
                    System.out.println("Course added successfully!");
                    break;

                case 2:
                    System.out.println("Available Courses:");
                    for (Course c : courseDatabase) {
                        System.out.println("\n" + c);
                    }
                    break;

                case 3:
                    System.out.print("Enter Student ID: ");
                    int studentID = scanner.nextInt();
                    scanner.nextLine();  // Consume the newline character
                    System.out.print("Enter Student Name: ");
                    String studentName = scanner.nextLine();

                    Student student = new Student(studentID, studentName);

                    System.out.println("Available Courses for Registration:");
                    for (Course c : courseDatabase) {
                        if (c.capacity > 0) {
                            System.out.println(c.code + " - " + c.title);
                        }
                    }

                    System.out.print("Enter the Course Code to Register: ");
                    String courseCode = scanner.nextLine();

                    for (Course c : courseDatabase) {
                        if (c.code.equals(courseCode)) {
                            if (c.capacity > 0) {
                                student.registeredCourses.add(courseCode);
                                c.capacity--;
                                System.out.println("Student registered successfully!");
                            } else {
                                System.out.println("Course is already full.");
                            }
                            break;
                        }
                    }
                    studentDatabase.add(student);
                    break;

                case 4:
                    System.out.print("Enter Student ID for Course Removal: ");
                    int studentToRemoveID = scanner.nextInt();
                    scanner.nextLine();  // Consume the newline character
                    System.out.print("Enter the Course Code to Remove: ");
                    String courseToRemoveCode = scanner.nextLine();

                    for (Student s : studentDatabase) {
                        if (s.studentID == studentToRemoveID) {
                            if (s.registeredCourses.contains(courseToRemoveCode)) {
                                s.registeredCourses.remove(courseToRemoveCode);

                                for (Course c : courseDatabase) {
                                    if (c.code.equals(courseToRemoveCode)) {
                                        c.capacity++;
                                        System.out.println("Student removed from the course successfully!");
                                    }
                                }
                            } else {
                                System.out.println("Student is not registered for this course.");
                            }
                            break;
                        }
                    }
                    break;

                case 5:
                    System.out.println("Thank you for using the Course Registration System!");
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
